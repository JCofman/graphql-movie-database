type Query @cacheControl(maxAge: 10000) {
  """
  This query searches all database models simultaneously, via the
  `/search/multi` endpoint. The results will be a list of mixed types
  that can include Movie | Show | Person | Company objects.

  If you want to search for a specific type of object, the multi-item query for
  that object, ie `movies` | `people`
  """
  search(query: String!, page: Int = 1): SearchResponse
  """
  Find movies — using a search query or a variety of filters and sorting
  options. If the `query` argument is provided, this will use the
  `/search/movie` endpoint, and the filter and sortBy options will be ignored.
  If query is not provided, this will use the `/discover/movie` endpoint
  using the provided filters and sortBy options. It supports all of the filter
  parameters and sort_by options that are available on the `/discover/movie/`
  endpoint.
  """
  movies(
    query: String
    sortBy: MediaSortBy = popularity_DESC
    filter: MediaFilter
    page: Int = 1
  ): MovieList
  """
  Find TV shows — using a search query or a variety of filters and sorting
  options. If the `query` argument is provided, this will use the
  `/search/tv` endpoint, and the filter and sortBy options will be ignored.
  If query is not provided, this will use the `/discover/tv` endpoint
  using the provided filters and sortBy options. It supports all of the filter
  parameters and sort_by options that are available on the `/discover/tv/`
  endpoint.
  """
  shows(
    query: String
    sortBy: MediaSortBy = popularity_DESC
    filter: MediaFilter
    page: Int = 1
  ): ShowList
  """
  Search the database for people that match a given search query.
  """
  people(query: String!, page: Int = 1): PersonList
  """
  Search the database for companies that match a given search query.
  """
  companies(query: String!, page: Int = 1): CompanyList
  """
  Get detailed information about a specific movie.
  """
  Movie(id: ID!): Movie
  """
  Get detailed information about a specific TV show.
  """
  Show(id: ID!): Show
  """
  Get the TV season details by id.
  """
  Season(showId: ID, seasonNumber: Int): Season
  """
  Get the TV episode details by id.
  """
  Episode(showId: ID, seasonNumber: Int, episodeNumber: Int): Episode
  """
  Get details information about a specific person.
  """
  Person(id: ID!): Person
  """
  Get the details about a production company.
  """
  Company(id: ID!): Company

  Configuration: Configuration
}

"""
The field containing query meta data.
@todo need to do some more research on best/practices
response types. Another pattern i have seen is to have two
queries, ie allPosts() and _allPostsMeta
"""
type QueryMeta @cacheControl(maxAge: 600) {
  totalPages: Int
  totalResults: Int
  page: Int
}

type MovieList @cacheControl(maxAge: 600) {
  meta: QueryMeta
  results: [Movie]
}
type ShowList @cacheControl(maxAge: 600) {
  meta: QueryMeta
  results: [Show]
}
type PersonList @cacheControl(maxAge: 600) {
  meta: QueryMeta
  results: [Person]
}
type CompanyList @cacheControl(maxAge: 600) {
  meta: QueryMeta
  results: [Company]
}
type SearchResponse @cacheControl(maxAge: 600) {
  meta: QueryMeta
  results: [SearchResult]
}

union SearchResult = Person | Movie | Show | Company
